import axios from "axios";

interface Step {
    step: number;
    description: string;
  }
  
  interface Character {
    mainCharacter: string;
    setting: string;
    style: string;
    colors: string;
}

  interface GeminiResponse {
    candidates: {
      content: {
        parts: {
          text: string;
        }[];
      };
    }[];
  }
  
  interface AnimationResult {
    code: string | null;
    prompt: string;
    step: number;
    error?: string;
  }
  
  interface GenerationResult {
    generateContent: (string | null)[];
    getPrompt: string[];
    errors: AnimationResult[] | null;
  }
  
  // Function to generate p5.js animation code for a step
  async function generateAnimationForStep(
    step: Step, 
    index: number, 
    steps: Step[], 
    characterInfo: Character, 
    consistentElements: string, 
    width: number, 
    height: number,
    API_KEY: string,
    API_ENDPOINT: string,
    style: string
  ): Promise<AnimationResult> {

    const enhancedPrompt = ` 
      You are a expert visual artist
      Create a p5.js animation that visualizes this step in a sequence: "${step.description}".
      character_and_scene_Info: ${characterInfo}
      
      This animation may have some consistent elements which can be used if needed and also could be changed according to need or scene a little bit.
      
      CONSISTENT_ELEMENTS: ${consistentElements}
      PREVIOUS STEPS: ${steps.filter(element => element.step < index).map(s => s.description)}
      CURRENT STEP TO ANIMATE: ${step.description}
      FUTURE STEPS: ${steps.filter(element => element.step > index).map(s => s.description)}
      
      Return ONLY the inner JavaScript code for p5.js instance mode. DO NOT include any outer function definition, wrapper, or p5 initialization.
      
      IMPORTANT: DO NOT include ANY of these:
      - No "function sketch(p) { ... }"
      - No "new p5(...)"
      - No "const sketch = (p) => { ... }"
      - No "let p5instance = function(p) { ... }"
      - No arrow function wrapper
      - No initialization of 'p' in any way
      - No "const sketch = function(p) { ... }"
      - No instance Mode like p={}
      
      No function or object should enclose p.setup, p.draw and other methods
      
      JUST provide the inner code body with:
      - Variable declarations
      - p.setup function
      - p.draw function
      - Any other necessary p methods
      
      DO NOT initialize p in any way as i am gonna initialize it do not from you own
      
      Technical requirements:
      - The code must begin directly with variable declarations and p.setup
      - Use p.createCanvas, p.background, p.ellipse, p.noise, etc. to reference all p5.js functions
      - Canvas width should be ${width} and height should be ${height}
      - Run at 60 FPS
      - Ensure the main character appears consistently with previous steps
      - Ensure smooth transitions from previous to current step
      - All visual elements should match the scene description
      - Write error-free, optimized code
      - Each frame precisely 6 seconds long
      - The animation needs to be smooth and visually clear, with precise transitions
      - avoid making complex animations and make smooth error free simple animations
      - does not create random animations
      - you can use images or elements from the internet only if it exists
      - dont use p.preload() you use async/await
      - only return p5.js strictly no extra text also avoid comment
      - the animation generated by code should not be still always moving and use text for story telling 
      - the animation should always have a moving part at beginning strictly
      - make detailed animation as each step as a complete animation but such that it can easily merge with previous and future steps
      
      Make it creative, visually appealing, and interactive where appropriate while maintaining character and scene consistency across all steps.
    `;

    const enhancedPrompt2 = `
     You are a expert visual artist
      Create a p5.js animation that visualizes this step in a sequence: "${step.description}".
      
      Return ONLY the inner JavaScript code for p5.js instance mode. DO NOT include any outer function definition, wrapper, or p5 initialization.
      
      IMPORTANT: DO NOT include ANY of these:
      - No "function sketch(p) { ... }"
      - No "new p5(...)"
      - No "const sketch = (p) => { ... }"
      - No "let p5instance = function(p) { ... }"
      - No arrow function wrapper
      - No initialization of 'p' in any way
      - No "const sketch = function(p) { ... }"
      - No instance Mode like p={}
      
      No function or object should enclose p.setup, p.draw and other methods
      
      JUST provide the inner code body with:
      - Variable declarations
      - p.setup function
      - p.draw function
      - Any other necessary p methods
      
      DO NOT initialize p in any way as i am gonna initialize it do not from you own
      
      Technical requirements:
      - The code must begin directly with variable declarations and p.setup
      - Use p.createCanvas, p.background, p.ellipse, p.noise, etc. to reference all p5.js functions
      - Canvas width should be ${width} and height should be ${height}
      - Run at 60 FPS
      - Write error-free, optimized code
      - Each frame precisely 6 seconds long
      - The animation needs to be smooth and visually clear
      - make smooth error free simple animations
      - dont use p.preload() you use async/await
      - only return p5.js strictly no extra text also avoid comment
      - the animation generated by code should not be still always moving and use text for story telling 
      - the animation should always have a moving part at beginning strictly
      - the animation should have complex structures and background should be black by default
      
      Make it creative, visually appealing, and interactive

    `
       
      const response = await axios.post<GeminiResponse>(
        `${API_ENDPOINT}?key=${API_KEY}`,
        {
          contents: [
            {
              parts: [
                {
                  text: style == '3brown1blue' ? enhancedPrompt2 : enhancedPrompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
          }
        }
      );
      const generatedText = response.data.candidates[0].content.parts[0].text;

     

      const cleanedCode = cleanP5Code(generatedText);
      return {
        code: cleanedCode,
        prompt: enhancedPrompt,
        step: index
      };
   
    }
  
  
  export async function generateAnimationsInParallel(
    steps: Step[], 
    characterInfo: Character, 
    consistentElements: string, 
    width: number, 
    height: number,
    API_KEY: string,
    API_ENDPOINT: string,
    style: string
  ): Promise<GenerationResult> {
    console.log(`Starting parallel generation for ${steps.length} steps...`);
    
    const promises: Promise<AnimationResult>[] = steps.map((step, index) => 
      generateAnimationForStep(step, index, steps, characterInfo, consistentElements, width, height, API_KEY, API_ENDPOINT, style)
    );
    
    const results: AnimationResult[] = await Promise.all(promises);

    results.sort((a, b) => a.step - b.step);

    const generateContent: (string | null)[] = results.map(result => result.code);
    const getPrompt: string[] = results.map(result => result.prompt);
    
    const errors: AnimationResult[] = results.filter(result => result.error !== undefined);
    if (errors.length > 0) {
      console.log(`Encountered ${errors.length} errors during generation:`);
      errors.forEach(error => console.error(`Step ${error.step}: ${error.error}`));
    }
    
    console.log(`Successfully generated ${results.length - errors.length} animations`);
    
    return {
      generateContent,
      getPrompt,
      errors: errors.length > 0 ? errors : null
    };
  }

  const cleanP5Code = (rawCode: string): string => {
 
    const cleanedCode = rawCode.replace(/```(javascript|js)?\n/g, '').replace(/```$/g, '');
    const removeFunction = cleanedCode.replace(/^const sketch = function\(p\) \{\n|\n\};$/g, ''); 
    
    return removeFunction
    }